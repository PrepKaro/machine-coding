package Infrastructure;

import Model.Agent;
import Model.Issue;
import Model.IssueState;
import Model.IssueType;

import java.util.*;
import java.util.stream.Collectors;


public class InMemoryRepository implements Repository{

    int maxIssue = 1;
    int maxAgent = 1;
    LinkedList<Issue> issueList = new LinkedList<>();
    HashMap<String, Issue> issueMap = new HashMap<>();

    LinkedList<Agent> agentList = new LinkedList<>();

    Map<String, String> agentToIssueTracker = new HashMap<>();

    Map<String, List<String>> agentToIssueMap = new HashMap<>();


    public String createIssue(String transactionId, IssueType issueType, String subject,
                       String description, String email) {

        //Ideally this should come from some code which can generate Issue if
        // Or fromPrimary key of DB - AutoGenerated
        String issueId = "I" + maxIssue;
        maxIssue++;

        Issue issue = Issue.builder()
                .issueId(issueId)
                .transactionId(transactionId)
                .issueType(issueType)
                .subject(subject)
                .description(description)
                .email(email)
                .issueState(IssueState.OPEN)
                .build();

        issueList.addLast(issue);
        issueMap.put(issueId, issue);

        System.out.println("Issue " + issueId +  " created against transaction " + transactionId);

        return issueId;
    }

    public String addAgent(String agentEmail, String agentName , List<IssueType> expertise) {

        String agentId = "A" + maxAgent;
        maxAgent++;

        Agent agent = Agent.builder()
                .id(agentId)
                .email(agentEmail)
                .name(agentName)
                .expertise(expertise)
                .build();

        agentList.add(agent);

        System.out.println("Agent " + agentId + " created");

        return agentId;
    }

    public String assignIssue(String issueId) {
        Agent agent = agentList.removeFirst();
        agentList.addLast(agent);

        if(agentToIssueMap.containsKey(agent.getId())) {
            List<String> issue = agentToIssueMap.get(agent.getId());
            issue.add(issueId);
            System.out.println("Issue " + issueId + " added to waitlist of Agent  " + agent.getId());
        } else {
            List<String> issue = new LinkedList<>();
            issue.add(issueId);
            agentToIssueMap.put(agent.getId(), issue);
            System.out.println("Issue " + issueId + " assigned to agent  " + agent.getId());
        }

        return agent.getId();
    }

    public List<Issue> getIssueByType(IssueType issueType) {
        return issueList.stream()
                .filter(issue -> issue.getIssueType() ==  issueType)
                .collect(Collectors.toList());
    }

    public List<Issue> getIssueByUserEmail(String email) {
        return issueList.stream()
                .filter(issue -> issue.getEmail().equals(email))
                .collect(Collectors.toList());
    }

    public boolean updateIssue(String issueId, IssueState status, String resolution) {
        Issue issue = issueMap.get(issueId);
        issue.setIssueState(status);
        issue.setResolution(resolution);
        return true;
    }


    public boolean resolveIssue(String issueId, String resolution) {
        Issue issue = issueMap.get(issueId);
        issue.setIssueState(IssueState.RESOLVED);
        issue.setResolution(resolution);
        return true;
    }

    public void viewAgentsWorkHistory() {
        for(Map.Entry<String, List<String >> x : agentToIssueMap.entrySet()) {
            System.out.println(x.getKey() + " -> " + x.getValue());
        }
    }
}
